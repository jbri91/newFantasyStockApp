[{"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\index.js":"1","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\App.js":"2","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\NavigationBar.js":"3","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\ReportPage.js":"4","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\SummaryPage.js":"5","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\HomePage.js":"6","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\CreateAccount.js":"7","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\StockModal.js":"8","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\StockCard.js":"9","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\ReviewOrder.js":"10","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\index.js":"11","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\App.js":"12","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\NavigationBar.js":"13","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\ReportPage.js":"14","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\HomePage.js":"15","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\CreateAccount.js":"16","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\SummaryPage.js":"17","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\StockCard.js":"18","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\StockModal.js":"19","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\ReviewOrder.js":"20"},{"size":218,"mtime":1611463770885,"results":"21","hashOfConfig":"22"},{"size":3305,"mtime":1621138847415,"results":"23","hashOfConfig":"22"},{"size":5427,"mtime":1621306026750,"results":"24","hashOfConfig":"22"},{"size":5084,"mtime":1621303362390,"results":"25","hashOfConfig":"22"},{"size":9122,"mtime":1621305938747,"results":"26","hashOfConfig":"22"},{"size":1099,"mtime":1621134851257,"results":"27","hashOfConfig":"22"},{"size":4162,"mtime":1621305113385,"results":"28","hashOfConfig":"22"},{"size":3395,"mtime":1621106027135,"results":"29","hashOfConfig":"22"},{"size":3917,"mtime":1621106027134,"results":"30","hashOfConfig":"22"},{"size":6584,"mtime":1621137435806,"results":"31","hashOfConfig":"22"},{"size":218,"mtime":1621394032852,"results":"32","hashOfConfig":"33"},{"size":3381,"mtime":1622937109194,"results":"34","hashOfConfig":"33"},{"size":7932,"mtime":1623615341966,"results":"35","hashOfConfig":"33"},{"size":5151,"mtime":1622940728838,"results":"36","hashOfConfig":"33"},{"size":1100,"mtime":1621394770160,"results":"37","hashOfConfig":"33"},{"size":4142,"mtime":1623549343261,"results":"38","hashOfConfig":"33"},{"size":9155,"mtime":1623612016969,"results":"39","hashOfConfig":"33"},{"size":3975,"mtime":1622400093330,"results":"40","hashOfConfig":"33"},{"size":3395,"mtime":1621394814943,"results":"41","hashOfConfig":"33"},{"size":6906,"mtime":1622764868901,"results":"42","hashOfConfig":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"wk3tjo",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1tmrxb9",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"67"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\index.js",[],["92","93"],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\App.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\NavigationBar.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\ReportPage.js",["94","95","96","97","98"],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\SummaryPage.js",["99","100"],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\HomePage.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\CreateAccount.js",["101"],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\StockModal.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\StockCard.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\fantasyStockApp\\stock-app\\src\\components\\ReviewOrder.js",["102"],"import React, { useEffect, useState } from \"react\";\n\nfunction ReviewOrder(props) {\n  const { selected } = props;\n  const { quantity } = props;\n  const { stockId } = props;\n  const { purchasedStocks } = props;\n  const { userId } = props;\n  const { buyingPower } = props;\n  const { setBuyingPower } = props;\n  const [shares, setShares] = useState([]);\n\n  useEffect(() => {\n    for (let i = 0; i < purchasedStocks.length; i++) {\n      if (stockId === purchasedStocks[i][0]) {\n        setShares(purchasedStocks[i][7]);\n      }\n    }\n  }, []);\n\n  function handlePlaceOrder() {\n    let boughtStock = buyingPower - props.stockSum;\n    let sellingStock = Number(buyingPower) + props.stockSum;\n    const sellStock = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n        boughtStock: sellingStock,\n      }),\n    };\n\n    const buyStock = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n        boughtStock: boughtStock.toFixed(2),\n      }),\n    };\n\n    if (selected === \"Buy\") {\n      if (props.stockSum > buyingPower) {\n        alert(\"You do not have enough buy power!\");\n      } else {\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            symbol: props.symbol,\n            stockName: props.stockName,\n            price: props.stockPrice,\n            day_change: props.dayChange,\n            percentage_change: props.percentageChange,\n            date: props.date,\n            shares: quantity,\n            userId: parseInt(userId),\n            initialPrice: props.stockPrice,\n          }),\n        };\n        fetch(\"/api/buystock\", requestOptions).then((data) =>\n          fetch(`/api/purchased/${userId}`)\n            .then((res) => res.json())\n            .then((data) => props.setPurchasedStocks(data))\n            .catch((error) => console.log(error))\n        );\n        fetch(\"/api/boughtstock\", buyStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: userId,\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n            .catch((error) => console.log(error))\n        );\n      }\n    } else if (selected === \"Sell\") {\n      let soldStock = shares - quantity;\n      if (soldStock >= 1) {\n        const requestOptions = {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            shares: soldStock,\n            stock_id: stockId,\n          }),\n        };\n        fetch(\"/api/updatestocks\", requestOptions)\n          .then((res) => res.json())\n          .then((data) =>\n            fetch(`/api/purchased/${userId}`)\n              .then((res) => res.json())\n              .then((data) => props.setPurchasedStocks(data))\n              .catch((error) => console.log(error))\n          );\n        fetch(\"/api/boughtstock\", sellStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: userId,\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n            .catch((error) => console.log(error))\n        );\n      } else {\n        const deleteStocks = {\n          method: \"DELETE\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            stock_id: stockId,\n          }),\n        };\n        fetch(\"/api/deleterow\", deleteStocks).then((data) =>\n          fetch(`/api/purchased/${userId}`)\n            .then((res) => res.json())\n            .then((data) => props.setPurchasedStocks(data))\n            .catch((error) => console.log(error))\n        );\n        fetch(\"/api/boughtstock\", sellStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: userId,\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n        );\n      }\n    }\n  }\n\n  let boughtStock = buyingPower - props.stockSum;\n    let sellingStock = Number(buyingPower) + Number(props.stockSum);\n  return (\n    <div>\n      <div\n        id=\"reviewModal\"\n        className=\"modal fade\"\n        role=\"dialog\"\n        style={{ color: \"black\" }}\n      >\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\"> Review Order </h4>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                &times;\n              </button>\n            </div>\n            <div\n              style={{ display: \"flex\", justifyContent: \"space-around\" }}\n              className=\"modal-body\"\n            >\n              <div style={{ fontSize: \"20px\" }}>\n                <p>\n                  {props.selected} {props.quantity} shares of {props.symbol} (\n                  {props.stockName})\n                </p>\n                <p> Limit at ${props.stockPrice}</p>\n                <p>Estimated Total: ${Number(props.stockSum).toFixed(2)}</p>\n                <p>\n                  {\" \"}\n                  Remaining Buy Power: $\n                  {props.selected === \"Buy\"\n                    ? boughtStock.toFixed(2)\n                    : sellingStock.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              className=\"btn btn-info\"\n              style={{ color: \"black\", fontWeight: \"bolder\" }}\n              onClick={handlePlaceOrder}\n              data-dismiss=\"modal\"\n            >\n              Place Order\n            </button>\n            <div\n              className=\"modal-footer\"\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewOrder;\n","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\index.js",[],["103","104"],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\App.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\NavigationBar.js",["105","106","107","108"],"import React, { useEffect, useReducer, useState } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport bullMarketIcon from \"../images/bullMarketIcon.png\";\nimport { Link, NavLink, useHistory } from \"react-router-dom\";\nimport { Modal } from \"bootstrap\";\n\nfunction NavigationBar(props) {\n  let history = useHistory();\n  let { setAuthentication } = props;\n  let { authentication } = props;\n  const { setFetchBuyingPower } = props;\n  const { createPassword } = props;\n  const { createUsername } = props;\n  const { setUserId } = props;\n  const { userId } = props;\n  const [usernameCredential, setUsernameCredential] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loginError, setLoginError] = useState(true);\n  const [modal, setModal] = useState(\"\");\n\n  const handleUsername = (event) => {\n    setUsernameCredential(event.target.value);\n  };\n\n  const handlePassword = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const resetInputFields = () => {\n    setUsernameCredential(\"\");\n    setPassword(\"\");\n  };\n\n  useEffect(() => {\n    if (createUsername & createPassword) {\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          usernameCredential: createUsername,\n          password: createPassword,\n        }),\n      };\n      fetch(\"/api/username\", requestOptions);\n    }\n    if (userId > 0) {\n      fetch(\"/api/foundusername\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId: parseInt(userId),\n        }),\n      })\n        .then((res) => res.json())\n        .then((data) => setUsernameCredential(data))\n        .catch((error) => console.log(error));\n    }\n  }, [userId]);\n\n  let handleCredentials = () => {\n    fetch(\"/api/username\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        usernameCredential: usernameCredential,\n        password: password,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => (data[1] ? setLoginError(data[1]) : setLoginError(false)))\n       \n    if (loginError)  {\n      setModal('modal')\n      fetch(\"/api/username\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          usernameCredential: usernameCredential,\n          password: password,\n        }),\n      })\n        .then((res) => res.json())\n        .then(\n          (data) =>\n            setAuthentication(data[1]) &\n            setUserId(data[0]) &\n            setFetchBuyingPower(data[2]) &\n            (localStorage.id = data[0])\n        )\n        .then(\n\n      fetch(\"/api/foundusername\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId: parseInt(userId),\n        }),\n      }))\n        .then((res) => res.json())\n        .then((data) => setUsernameCredential(data)) \n        .catch((error) => console.log(error));\n        \n    } else {\n      return setModal(\"\");\n    }\n    \n    // fetch(\"/api/username\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify({\n    //     usernameCredential: usernameCredential,\n    //     password: password,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then(\n    //     (data) =>\n    //       console.log(data) &\n    //       setAuthentication(data[1]) &\n    //       setUserId(data[0]) &\n    //       setFetchBuyingPower(data[2]) &\n    //       (localStorage.id = data[0]),\n\n    //   )\n    //   .catch((error) => console.log(error))\n\n    // fetch(\"/api/foundusername\", {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify({\n    //     userId: parseInt(userId),\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((data) => setUsernameCredential(data))\n    //   .catch((error) => console.log(error));\n  };\n\n  let handleLogOut = () => {\n    setAuthentication(false);\n    resetInputFields();\n    localStorage.clear();\n  };\n\n  authentication ? history.push(\"/summary\") : console.log(\"Please Login\");\n\n  return (\n    <div style={{ marginBottom: \"70px\" }}>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">\n          <img src={bullMarketIcon} alt=\"Bull Market\" />\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-evenly\",\n            }}\n          >\n            <NavLink style={{ color: \"gray\" }} to=\"/\" href=\"home\">\n              Home|\n            </NavLink>\n            <NavLink style={{ color: \"gray\" }} to=\"/report\" href=\"reportPage\">\n              Report|\n            </NavLink>\n            <NavLink style={{ color: \"gray\" }} to=\"/summary\" href=\"summaryPage\">\n              Summary\n            </NavLink>\n          </div>\n        </Nav>\n        <div style={{ marginRight: \"20px\" }}>\n          {authentication\n            ? \"Welcome \" +\n              (usernameCredential ? usernameCredential : createUsername)\n            : null}\n        </div>\n        {authentication ? (\n          <button\n            style={{ color: \"black\" }}\n            className=\"btn btn-info btn-lg\"\n            onClick={handleLogOut}\n          >\n            Log Out\n          </button>\n        ) : (\n          <button\n            style={{ color: \"black\" }}\n            className=\"btn btn-info btn-lg\"\n            data-toggle=\"modal\"\n            data-target=\"#myModal\"\n            href=\"#login\"\n          >\n            Login/Register\n          </button>\n        )}\n      </Navbar>\n\n      <div\n        id=\"myModal\"\n        className=\"modal fade\"\n        role=\"dialog\"\n        style={{ color: \"black\" }}\n      >\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\"> Log in to your account</h4>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                &times;\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <div>\n                <input\n                  placeholder=\"User ID\"\n                  onChange={handleUsername}\n                  value={usernameCredential}\n                />\n                <input\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={handlePassword}\n                  type=\"password\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"modal-footer\"\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              <NavLink\n                to=\"/createAccount\"\n                href=\"createAccount\"\n                className=\"btn btn-link\"\n                data-dismiss=\"modal\"\n                onClick={() => history.push(\"/createAccount\")}\n              >\n                Create Account\n              </NavLink>\n              {loginError ? null : (\n                <p style={{ fontSize: \"13px\", color: \"red\" }}>\n                  The username or password is incorrect\n                </p>\n              )}\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                style={{\n                  backgroundColor: \"lightblue\",\n                  border: \"solid\",\n                  borderColor: \"skyblue\",\n                }}\n                onClick={handleCredentials}\n                data-dismiss={modal}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NavigationBar;\n","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\ReportPage.js",["109","110","111","112","113","114"],"import React, { useEffect, useState } from \"react\";\nfunction ReportPage(props) {\n  const [allSymbols, setAllSymbols] = useState([]);\n  const [numberShares, setNumberShares] = useState([]);\n  const [totalInvested, setTotalInvested] = useState([]);\n  const [totalPortfolioSum, setTotalPortfolioSum] = useState([]);\n  const [stockReport, setStockReport] = useState([]);\n  const { userId } = props;\n  const [buyingPower, setBuyingPower] = useState(\"\");\n  const { fetchBuyingPower } = props;\n  \n  useEffect(() => {\n    fetch(`/api/allsymbols/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setAllSymbols(data))\n      .catch((error) => console.log(error));\n    fetch(`/api/shares/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setNumberShares(data))\n      .catch((error) => console.log(error));\n    fetch(`/api/totalPortfolio/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setTotalPortfolioSum(data))\n      .catch((error) => console.log(error));\n\n    fetch(`/api/stockreport/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setStockReport(data))\n      .catch((error) => console.log(error));\n\n    fetch(\"/api/userbalance\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => setBuyingPower(data))\n      .catch((error) => console.log(error));\n  }, [buyingPower]);\n\n  function handleDelete(e) {\n    const requestOptions = {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        stock_symbol: e.target.id,\n        userId: parseInt(userId),\n      }),\n    };\n    fetch(\"/api/deleteall\", requestOptions).then((res) => {\n      fetch(`/api/allsymbols/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setAllSymbols(data))\n        .catch((error) => console.log(error));\n      fetch(`/api/stockreport/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setStockReport(data))\n        .catch((error) => console.log(error));\n      fetch(`/api/shares/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setNumberShares(data))\n        .catch((error) => console.log(error));\n      fetch(`/api/totalPortfolio/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setTotalPortfolioSum(data))\n        .catch((error) => console.log(error));\n\n\n        let amountInvested = -1;\n        for(let i =0; i < stockReport.length; i++){\n          if(stockReport[i][0] == e.target.id) {\n            amountInvested = stockReport[i][2] * stockReport[i][1];\n            break;\n          }\n        }\n        let updatedBalance = Number(Number(buyingPower) + amountInvested).toFixed(2)\n        console.log('buyingPower:', Number(buyingPower),'amountInvested: ', amountInvested.toFixed(2), 'updatedBalance: ', updatedBalance)\n        fetch('/api/boughtstock', {\n          method: 'PUT',\n          headers: { 'Content-Type' : 'application/json' },\n          body: JSON.stringify({\n            userId: parseInt(userId),\n            boughtStock: updatedBalance,\n          })\n        })\n       \n\n        \n      let stockRows = [];\n      for (let i = 0; i < numberShares.length; i++) {\n        stockRows.push(\n          <tr key={i}>\n            <td> {stockReport[i][0]} </td>\n            <td> {stockReport[i][1]} </td>\n            <td> ${(stockReport[i][1] * stockReport[i][2]).toFixed(2)} </td>\n            <td>\n              {\" \"}\n              {((stockReport[i][2] / totalPortfolioSum) * 100).toFixed(\n                2\n              )}%{\" \"}\n            </td>\n            <td>\n              <button\n                id={stockReport[i][0]}\n                type=\"button\"\n                onClick={handleDelete}\n                className=\"btn btn-secondary\"\n              >\n                Sell All\n              </button>\n            </td>\n          </tr>\n        );\n      }\n    });\n  }\n\n\n  let stockRows = [];\n  for (let i = 0; i < stockReport.length; i++) {\n    stockRows.push(\n      <tr key={i}>\n        <td> {stockReport[i][0]} </td>\n        <td> {stockReport[i][1]} </td>\n        <td> ${(stockReport[i][1] * stockReport[i][2]).toFixed(2)} </td>\n        <td>\n          {\" \"}\n          {(((stockReport[i][2] / totalPortfolioSum) * 100) * stockReport[i][1]).toFixed(2)}%{\" \"}\n        </td>\n        <td>\n          <button\n            id={stockReport[i][0]}\n            type=\"button\"\n            onClick={handleDelete}\n            className=\"btn btn-secondary\"\n          >\n            Sell All\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <table style={{ color: \"white\" }} className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Symbol</th>\n            <th scope=\"col\">Shares</th>\n            <th scope=\"col\">Total Invested</th>\n            <th scope=\"col\"> % of Your Portfolio</th>\n            <th>Quick Sell</th>\n          </tr>\n        </thead>\n        <tbody>{stockRows}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default ReportPage;\n","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\HomePage.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\CreateAccount.js",["115"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CreateAccount(props) {\n \n  let history = useHistory();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [passwordRequirements, setPasswordRequirements] = useState(\"\");\n  const [copyPassword, setCopyPassword] = useState(\"\");\n  const [noMatch, setNoMatch] = useState(\"\");\n  const [fieldsCheck, setFieldsCheck] = useState(\"\");\n\n  function handleUsername(e) {\n    setUsername(e.target.value);\n  }\n\n  function handlePassword(e) {\n    setPassword(e.target.value);\n  }\n\n  function handleCopyPassword(e) {\n    setCopyPassword(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        password: password,\n      }),\n    };\n\n    let checkPassword = password;\n    let regex = new RegExp(/[A-Z]/ && /[0-9]/);\n    let result = regex.test(checkPassword);\n\n    console.log(result);\n    if (username && password) {\n      setFieldsCheck(\"\");\n      if ((password.length > 8, result)) {\n        setNoMatch(\"\");\n        setPasswordRequirements(\"\");\n        if (copyPassword === password) {\n          setNoMatch(\"\");\n          fetch(\"api/createaccount\", requestOptions);\n          \n            fetch(\"/api/username\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                usernameCredential: username,\n                password: password,\n              }),\n            })\n              .then((res) => res.json())\n              .then(\n                (data) =>\n                  props.setAuthentication(data[1]) &\n                  props.setUserId(data[0]) & (localStorage.id = data[0]) \n              );\n          \n\n          history.push(\"/summary\");\n        } else {\n          setNoMatch(\n            <p style={{ fontSize: \"15px\", color: \"red\", marginRight: \"30px\" }}>\n              Password does not match\n            </p>\n          );\n        }\n      } else {\n        setPasswordRequirements(\n          <ul style={{ fontSize: \"15px\", color: \"red\", marginRight: \"30px\" }}>\n            <li>Password must be 8 or more characters</li>\n            <li>Password must have atleast one uppercase letter</li>\n            <li>Password must have atleast one Number</li>\n          </ul>\n        );\n      }\n    } else {\n      setFieldsCheck(\n        <p style={{ fontSize: \"15px\", color: \"red\", marginRight: \"30px\" }}>\n          Please Fill In All Fields\n        </p>\n      );\n    }\n  }\n\n  return (\n    <div\n      style={{\n        border: \"15px solid grey\",\n        width: \"400px\",\n        padding: \"50px\",\n        margin: \"0 auto\",\n        display: \"flex\",\n      }}\n    >\n      <div className=\"form-group\">\n        <h1 className=\"display-6\" style={{ marginBottom: \"70px\" }}>\n          Create An Account\n        </h1>\n        <form onSubmit={handleSubmit}>\n          {fieldsCheck}\n          <input\n            className=\"form-control\"\n            onChange={handleUsername}\n            style={{ marginBottom: \"20px\" }}\n            placeholder=\"Username\"\n          />\n          {error ? (\n            <p style={{ fontSize: \"15px\", color: \"red\" }}>\n              Username is already taken\n            </p>\n          ) : null}\n          <input\n            className=\"form-control\"\n            onChange={handlePassword}\n            type=\"password\"\n            style={{ marginBottom: \"20px\" }}\n            placeholder=\"Password\"\n          />\n          <input\n            className=\"form-control\"\n            onChange={handleCopyPassword}\n            type=\"password\"\n            style={{ marginBottom: \"20px\" }}\n            placeholder={\"Re-type Password\"}\n          />\n          {noMatch}\n          {passwordRequirements}\n          <button type=\"submit\" className=\"btn btn-info\">\n            Create Account\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default CreateAccount;\n","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\SummaryPage.js",["116","117"],"import React, { useState, useEffect } from \"react\";\nimport StockCard from \"./StockCard\";\nimport StockModal from \"./StockModal\";\n\n\n\nfunction SummaryPage(props) {\n  const [buyingPower, setBuyingPower] = useState('');\n  const [purchasedStocks, setPurchasedStocks] = useState([]);\n  const [tesla, setTesla] = useState([]);\n  const [apple, setApple] = useState([]);\n  const [amazon, setAmazon] = useState([]);\n  const [microsoft, setMicrosoft] = useState([]);\n  const [stockPrice, setStockPrice] = useState(0);\n  const [stockName, setStockName] = useState(\"\");\n  const [dayChange, setDayChange] = useState(\"\");\n  const [percentageChange, setPercentageChange] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [symbol, setSymbol] = useState(\"\");\n  const [stockId, setStockId] = useState(\"\");\n  const [searchStock, setSearchStock] = useState(\"\");\n  const [accountValue, setAccountValue] = useState(0);\n\n  const [sumOfAllStocksPurchased, setSumOfAllStocksPurchased] = useState(0);\n  const { userId } = props;\n\n  useEffect(() => {\n    fetch(\"/api/tesla\")\n      .then((res) => res.json())\n      .then((data) => setTesla(data))\n      .catch((error) => console.log(error));\n    fetch(\"/api/amazon\")\n      .then((res) => res.json())\n      .then((data) => setAmazon(data))\n      .catch((error) => console.log(error));\n    fetch(\"/api/microsoft\")\n      .then((res) => res.json())\n      .then((data) => setMicrosoft(data))\n      .catch((error) => console.log(error));\n    fetch(\"/api/apple\")\n      .then((res) => res.json())\n      .then((data) => setApple(data))\n      .catch((error) => console.log(error));\n    fetch(`/api/sumofallstockspurchased/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setSumOfAllStocksPurchased(data))\n      .catch((error) => console.log(error));\n    fetch(`/api/purchased/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setPurchasedStocks(data))\n      .catch((error) => console.log(error));\n    \n\n      \n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n      }),\n    };\n    fetch(\"/api/userbalance\", requestOptions)\n      .then((res) => res.json())\n      .then((data) => setBuyingPower(data));\n\n    fetch('/api/accountvalue', {\n      method: 'POST',\n      headers: { 'Content-Type' : 'application/json'},\n      body: JSON.stringify({\n        userId: parseInt(userId),\n      })\n    }).then(res => res.json())\n    .then(data => setAccountValue(data == 0 ? 20000 : data))\n    .catch(error => console.log(error))\n\n    fetch(`/api/allsymbols/${userId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        for (let i = 0; i < data.length; i++) {\n          fetch(`/api/searchStock/${data[i]}`)\n            .then((res) => res.json())\n            .then((data) =>\n              fetch(\"/api/lateststocks\", {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                  symbol: data.symbol,\n                  stockPrice: data.latestPrice,\n                  dayChange: data.change,\n                  percentageChange: data.changePercent,\n                  userId: parseInt(userId),\n                }),\n              })\n            );\n        }\n      });\n     \n      \n\n  }, [accountValue, ]);\n\n\n  function handleSearch(e) {\n    setSearchStock(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    fetch(`/api/searchStock/${searchStock}`)\n      .then((res) => res.json())\n      .then((data) => setSearchStock(data))\n      .catch((error) => console.log(error));\n  }\n\n  let stocksPurchased = [];\n  for (let i = 0; i < purchasedStocks.length; i++) {\n    stocksPurchased.push(\n      <StockCard\n        key={purchasedStocks[i][0]}\n        stockId={purchasedStocks[i][0]}\n        symbol={purchasedStocks[i][1]}\n        stockName={purchasedStocks[i][2]}\n        price={purchasedStocks[i][3]}\n        dayChange={purchasedStocks[i][4]}\n        percentChange={purchasedStocks[i][5]}\n        time={purchasedStocks[i][6]}\n        shares={purchasedStocks[i][7]}\n        initialPrice={purchasedStocks[i][9]}\n        setPrice={setStockPrice}\n        setStockName={setStockName}\n        setSymbol={setSymbol}\n        setDate={setDate}\n        setDayChange={setDayChange}\n        setPercentageChange={setPercentageChange}\n        setStockId={setStockId}\n      />\n    );\n  }\n  \n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"grid\",\n          justifyContent: \"flex-start\",\n          marginLeft: \"10px\",\n          borderStyle: \"solid\",\n          width: \"400px\",\n          position: \"relative\",\n          top: \"-70px\",\n          left: \"-10px\",\n        }}\n      >\n        <h3>Buying Power: ${Number(buyingPower).toFixed(2)}</h3>\n        <h3>Account Value: ${Number(accountValue).toFixed(2)}</h3>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input onChange={handleSearch} placeholder=\"Search\" />\n      </form>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        {searchStock.companyName ? (\n          <StockCard\n            symbol={searchStock.symbol}\n            stockName={searchStock.companyName}\n            price={searchStock.latestPrice.toFixed(2)}\n            dayChange={searchStock.change}\n            percentChange={searchStock.changePercent}\n            time={searchStock.latestTime}\n            setPrice={setStockPrice}\n            setStockName={setStockName}\n            setSymbol={setSymbol}\n            setDate={setDate}\n            setDayChange={setDayChange}\n            setPercentageChange={setPercentageChange}\n            setStockId={setStockId}\n          />\n        ) : null}\n      </div>\n      <h1 style={{ fontSize: \"30px\", marginTop: \"15px\" }}> Positions Cards </h1>\n      <header\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n      >\n        {stocksPurchased}\n      </header>\n      <h1 style={{ fontSize: \"30px\", marginTop: \"15px\" }}> Popular Stocks </h1>\n      <div\n        style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n      >\n        <StockCard\n          symbol={tesla.symbol}\n          stockName={tesla.companyName}\n          price={\n            tesla.latestPrice ? tesla.latestPrice.toFixed(2) : tesla.latestPrice\n          }\n          dayChange={tesla.change}\n          percentChange={tesla.changePercent}\n          time={tesla.latestTime}\n          setPrice={setStockPrice}\n          setStockName={setStockName}\n          setSymbol={setSymbol}\n          setDate={setDate}\n          setDayChange={setDayChange}\n          setPercentageChange={setPercentageChange}\n          setStockId={setStockId}\n        />\n        <StockCard\n          symbol={amazon.symbol}\n          stockName={amazon.companyName}\n          price={\n            amazon.latestPrice\n              ? amazon.latestPrice.toFixed(2)\n              : amazon.latestPrice\n          }\n          dayChange={amazon.change}\n          percentChange={amazon.changePercent}\n          time={amazon.latestTime}\n          setPrice={setStockPrice}\n          setStockName={setStockName}\n          setSymbol={setSymbol}\n          setDate={setDate}\n          setDayChange={setDayChange}\n          setPercentageChange={setPercentageChange}\n          setStockId={setStockId}\n        />\n        <StockCard\n          symbol={apple.symbol}\n          stockName={apple.companyName}\n          price={\n            apple.latestPrice ? apple.latestPrice.toFixed(2) : apple.latestPrice\n          }\n          dayChange={apple.change}\n          percentChange={apple.changePercent}\n          time={apple.latestTime}\n          setPrice={setStockPrice}\n          setStockName={setStockName}\n          setSymbol={setSymbol}\n          setDate={setDate}\n          setDayChange={setDayChange}\n          setPercentageChange={setPercentageChange}\n          setStockId={setStockId}\n        />\n        <StockCard\n          symbol={microsoft.symbol}\n          stockName={microsoft.companyName}\n          price={\n            microsoft.latestPrice\n              ? microsoft.latestPrice.toFixed(2)\n              : microsoft.latestPrice\n          }\n          dayChange={microsoft.change}\n          percentChange={microsoft.changePercent}\n          time={microsoft.latestTime}\n          setPrice={setStockPrice}\n          setStockName={setStockName}\n          setSymbol={setSymbol}\n          setDate={setDate}\n          setDayChange={setDayChange}\n          setPercentageChange={setPercentageChange}\n          setStockId={setStockId}\n        />\n        <StockModal\n          stockPrice={stockPrice}\n          stockName={stockName}\n          symbol={symbol}\n          dayChange={dayChange}\n          date={date}\n          percentageChange={percentageChange}\n          sumOfAllStocksPurchased={sumOfAllStocksPurchased}\n          purchasedStocks={purchasedStocks}\n          setPurchasedStocks={setPurchasedStocks}\n          stockId={stockId}\n          buyingPower={buyingPower}\n          setBuyingPower={setBuyingPower}\n          userId={userId}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default SummaryPage;\n","C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\StockCard.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\StockModal.js",[],"C:\\Users\\Johnny\\Desktop\\Code Projects\\React Projects\\newFantasyStockApp\\fantasyStockApp\\src\\components\\ReviewOrder.js",["118"],"import React, { useEffect, useState } from \"react\";\n\nfunction ReviewOrder(props) {\n  const { selected } = props;\n  const { quantity } = props;\n  const { stockId } = props;\n  const { purchasedStocks } = props;\n  const { setPurchasedStocks } = props;\n  const { userId } = props;\n  const { buyingPower } = props;\n  const { setBuyingPower } = props;\n  const [shares, setShares] = useState([]);\n  \n  // console.log(shares)\n\n  useEffect(() => {\n    for (let i = 0; i < purchasedStocks.length; i++) {\n      if (stockId === purchasedStocks[i][0]) {\n        setShares(purchasedStocks[i][7]);\n      }\n    }\n\n    fetch(`/api/purchased/${userId}`)\n      .then((res) => res.json())\n      .then((data) => setPurchasedStocks(data))\n      .catch((error) => console.log(error));\n  }, [shares, purchasedStocks]);\n\n  function handlePlaceOrder() {\n    let boughtStock = buyingPower - props.stockSum;\n    let sellingStock = Number(buyingPower) + props.stockSum;\n    const sellStock = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n        boughtStock: sellingStock,\n      }),\n    };\n\n    const buyStock = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n        boughtStock: boughtStock.toFixed(2),\n      }),\n    };\n\n    if (selected === \"Buy\") {\n      if (props.stockSum > buyingPower) {\n        alert(\"You do not have enough buy power!\");\n      } else {\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            symbol: props.symbol,\n            stockName: props.stockName,\n            price: props.stockPrice,\n            day_change: props.dayChange,\n            percentage_change: props.percentageChange,\n            date: props.date,\n            shares: quantity,\n            userId: parseInt(userId),\n            initialPrice: props.stockPrice,\n          }),\n        };\n        fetch(\"/api/buystock\", requestOptions).then((data) =>\n          fetch(`/api/purchased/${userId}`)\n            .then((res) => res.json())\n            .then((data) => props.setPurchasedStocks(data))\n            .catch((error) => console.log(error))\n        );\n        fetch(\"/api/boughtstock\", buyStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: parseInt(userId),\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n            .catch((error) => console.log(error))\n        );\n      }\n    } else if (selected === \"Sell\") {\n      let soldStock = shares - quantity;\n      console.log(shares, quantity, soldStock);\n      if (soldStock >= 1) {\n        const requestOptions = {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            shares: soldStock,\n            stock_id: stockId,\n          }),\n        };\n        fetch(\"/api/updatestocks\", requestOptions)\n          .then((res) => res.json())\n          .then((data) =>\n            fetch(`/api/purchased/${userId}`)\n              .then((res) => res.json())\n              .then((data) => props.setPurchasedStocks(data))\n              .catch((error) => console.log(error))\n          );\n        fetch(\"/api/boughtstock\", sellStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: parseInt(userId),\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n            .catch((error) => console.log(error))\n        );\n      } else {\n        const deleteStocks = {\n          method: \"DELETE\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            stock_id: stockId,\n          }),\n        };\n        fetch(\"/api/deleterow\", deleteStocks).then((data) =>\n          fetch(`/api/purchased/${userId}`)\n            .then((res) => res.json())\n            .then((data) => props.setPurchasedStocks(data))\n            .catch((error) => console.log(error))\n        );\n        fetch(\"/api/boughtstock\", sellStock).then((data) =>\n          fetch(\"/api/userbalance\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              userId: userId,\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => setBuyingPower(data))\n        );\n      }\n    }\n  }\n\n  let boughtStock = buyingPower - props.stockSum;\n  let sellingStock = Number(buyingPower) + Number(props.stockSum);\n  return (\n    <div>\n      <div\n        id=\"reviewModal\"\n        className=\"modal fade\"\n        role=\"dialog\"\n        style={{ color: \"black\" }}\n      >\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\"> Review Order </h4>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                &times;\n              </button>\n            </div>\n            <div\n              style={{ display: \"flex\", justifyContent: \"space-around\" }}\n              className=\"modal-body\"\n            >\n              <div style={{ fontSize: \"20px\" }}>\n                <p>\n                  {props.selected} {props.quantity} shares of {props.symbol} (\n                  {props.stockName})\n                </p>\n                <p> Limit at ${props.stockPrice}</p>\n                <p>Estimated Total: ${Number(props.stockSum).toFixed(2)}</p>\n                <p>\n                  {\" \"}\n                  Remaining Buy Power: $\n                  {props.selected === \"Buy\"\n                    ? boughtStock.toFixed(2)\n                    : sellingStock.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              className=\"btn btn-info\"\n              style={{ color: \"black\", fontWeight: \"bolder\" }}\n              onClick={handlePlaceOrder}\n              data-dismiss=\"modal\"\n            >\n              Place Order\n            </button>\n            <div\n              className=\"modal-footer\"\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewOrder;\n",["119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":20},{"ruleId":"125","severity":1,"message":"129","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":23},{"ruleId":"125","severity":1,"message":"130","line":5,"column":25,"nodeType":"127","messageId":"128","endLine":5,"endColumn":41},{"ruleId":"131","severity":1,"message":"132","line":40,"column":6,"nodeType":"133","endLine":40,"endColumn":8,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":72,"column":32,"nodeType":"137","messageId":"138","endLine":72,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":73,"column":40,"nodeType":"137","messageId":"138","endLine":73,"endColumn":42},{"ruleId":"131","severity":1,"message":"132","line":100,"column":6,"nodeType":"133","endLine":100,"endColumn":8,"suggestions":"139"},{"ruleId":"125","severity":1,"message":"140","line":9,"column":17,"nodeType":"127","messageId":"128","endLine":9,"endColumn":25},{"ruleId":"131","severity":1,"message":"141","line":19,"column":6,"nodeType":"133","endLine":19,"endColumn":8,"suggestions":"142"},{"ruleId":"121","replacedBy":"143"},{"ruleId":"123","replacedBy":"144"},{"ruleId":"125","severity":1,"message":"145","line":1,"column":28,"nodeType":"127","messageId":"128","endLine":1,"endColumn":38},{"ruleId":"125","severity":1,"message":"146","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":14},{"ruleId":"125","severity":1,"message":"147","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":15},{"ruleId":"131","severity":1,"message":"148","line":59,"column":6,"nodeType":"133","endLine":59,"endColumn":14,"suggestions":"149"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":20},{"ruleId":"125","severity":1,"message":"129","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":23},{"ruleId":"125","severity":1,"message":"130","line":5,"column":25,"nodeType":"127","messageId":"128","endLine":5,"endColumn":41},{"ruleId":"125","severity":1,"message":"150","line":10,"column":11,"nodeType":"127","messageId":"128","endLine":10,"endColumn":27},{"ruleId":"131","severity":1,"message":"132","line":41,"column":6,"nodeType":"133","endLine":41,"endColumn":19,"suggestions":"151"},{"ruleId":"135","severity":1,"message":"136","line":73,"column":32,"nodeType":"137","messageId":"138","endLine":73,"endColumn":34},{"ruleId":"125","severity":1,"message":"140","line":9,"column":17,"nodeType":"127","messageId":"128","endLine":9,"endColumn":25},{"ruleId":"135","severity":1,"message":"136","line":73,"column":40,"nodeType":"137","messageId":"138","endLine":73,"endColumn":42},{"ruleId":"131","severity":1,"message":"132","line":100,"column":6,"nodeType":"133","endLine":100,"endColumn":22,"suggestions":"152"},{"ruleId":"131","severity":1,"message":"153","line":27,"column":6,"nodeType":"133","endLine":27,"endColumn":31,"suggestions":"154"},{"ruleId":"121","replacedBy":"155"},{"ruleId":"123","replacedBy":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'allSymbols' is assigned a value but never used.","Identifier","unusedVar","'totalInvested' is assigned a value but never used.","'setTotalInvested' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["160"],"'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'purchasedStocks' and 'stockId'. Either include them or remove the dependency array.",["161"],["157"],["158"],"'useReducer' is defined but never used.","'Link' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has missing dependencies: 'createPassword' and 'createUsername'. Either include them or remove the dependency array.",["162"],"'fetchBuyingPower' is assigned a value but never used.",["163"],["164"],"React Hook useEffect has missing dependencies: 'setPurchasedStocks', 'stockId', and 'userId'. Either include them or remove the dependency array.",["165"],["157"],["158"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"166","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [userId]",{"range":"179","text":"180"},{"range":"181","text":"180"},"Update the dependencies array to be: [purchasedStocks, stockId]",{"range":"182","text":"183"},"Update the dependencies array to be: [createPassword, createUsername, userId]",{"range":"184","text":"185"},"Update the dependencies array to be: [buyingPower, userId]",{"range":"186","text":"187"},"Update the dependencies array to be: [accountValue, userId]",{"range":"188","text":"189"},"Update the dependencies array to be: [shares, purchasedStocks, userId, stockId, setPurchasedStocks]",{"range":"190","text":"191"},[1429,1431],"[userId]",[3351,3353],[534,536],"[purchasedStocks, stockId]",[1832,1840],"[createPassword, createUsername, userId]",[1479,1492],"[buyingPower, userId]",[3351,3367],"[accountValue, userId]",[767,792],"[shares, purchasedStocks, userId, stockId, setPurchasedStocks]"]