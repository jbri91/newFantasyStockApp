[{"/Users/johnnyrbrionesjr./newFantasyStockApp/src/index.js":"1","/Users/johnnyrbrionesjr./newFantasyStockApp/src/App.js":"2","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/SummaryPage.js":"3","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/CreateAccount.js":"4","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/HomePage.js":"5","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/NavigationBar.js":"6","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/ReportPage.js":"7","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/StockModal.js":"8","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/StockCard.js":"9","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/ReviewOrder.js":"10","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/Loading.js":"11"},{"size":218,"mtime":1641092478631,"results":"12","hashOfConfig":"13"},{"size":3509,"mtime":1641150678341,"results":"14","hashOfConfig":"13"},{"size":9546,"mtime":1641152670225,"results":"15","hashOfConfig":"13"},{"size":3835,"mtime":1641092478629,"results":"16","hashOfConfig":"13"},{"size":1123,"mtime":1641092478629,"results":"17","hashOfConfig":"13"},{"size":7493,"mtime":1641092478629,"results":"18","hashOfConfig":"13"},{"size":5511,"mtime":1641092478629,"results":"19","hashOfConfig":"13"},{"size":3545,"mtime":1641092478629,"results":"20","hashOfConfig":"13"},{"size":3975,"mtime":1641092478629,"results":"21","hashOfConfig":"13"},{"size":8095,"mtime":1641092478629,"results":"22","hashOfConfig":"13"},{"size":212,"mtime":1641101805901,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"10d21c5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/johnnyrbrionesjr./newFantasyStockApp/src/index.js",[],["49","50"],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/App.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/SummaryPage.js",["51","52","53","54","55","56"],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/CreateAccount.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/HomePage.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/NavigationBar.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/ReportPage.js",["57"],"import React, { useEffect, useState } from \"react\";\nfunction ReportPage(props) {\n  const [allSymbols, setAllSymbols] = useState([]);\n  const [numberShares, setNumberShares] = useState([]);\n  // const [totalInvested, setTotalInvested] = useState([]);\n  const [totalPortfolioSum, setTotalPortfolioSum] = useState([]);\n  const [stockReport, setStockReport] = useState([]);\n  const { userId } = props;\n  const [buyingPower, setBuyingPower] = useState(\"\");\n  console.log('User Id in ReportPage', userId)\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    \n\n    fetch(`/api/allsymbols/${userId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data)\n        setAllSymbols(data)})\n      .catch((error) => console.log(error));\n    fetch(`/api/shares/${userId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data)\n        setNumberShares(data)})\n      .catch((error) => console.log(error));\n    fetch(`/api/totalPortfolio/${userId}`, { signal:signal })\n      .then((res) => res.json())\n      .then((data) => setTotalPortfolioSum(JSON.parse(data)))\n      .catch((error) => console.log(error));\n\n    fetch(`/api/stockreport/${userId}`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(JSON.parse(data))\n        setStockReport(JSON.parse(data))})\n      .catch((error) => console.log(error));\n      console.log(userId)\n    fetch(\"/api/userbalance\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => setBuyingPower(data))\n      .catch((error) => console.log(error));\n\n      return function cleanup() {\n        abortController.abort()\n      }\n  }, [userId]);\n\n  function handleDelete(e) {\n    console.log(e.target.id)\n    const requestOptions = {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        stock_symbol: e.target.id,\n        userId: parseInt(userId),\n      }),\n    };\n    fetch(\"/api/deleteall\", requestOptions).then((res) => {\n      fetch(`/api/allsymbols/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setAllSymbols(data))\n        .catch((error) => console.log(error));\n      fetch(`/api/stockreport/${userId}`)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data)\n          setStockReport(JSON.parse(data))})\n        .catch((error) => console.log(error));\n      fetch(`/api/shares/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setNumberShares(data))\n        .catch((error) => console.log(error));\n      fetch(`/api/totalPortfolio/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setTotalPortfolioSum(JSON.parse(data)))\n        .catch((error) => console.log(error));\n\n\n        let amountInvested = -1;\n        for(let i =0; i < stockReport.length; i++){\n          if(stockReport[i][0] === e.target.id) {\n            amountInvested = stockReport[i][2] * stockReport[i][1];\n            break;\n          }\n        }\n        let updatedBalance = Number(Number(buyingPower) + amountInvested).toFixed(2)\n        fetch('/api/boughtstock', {\n          method: 'PUT',\n          headers: { 'Content-Type' : 'application/json' },\n          body: JSON.stringify({\n            userId: parseInt(userId),\n            boughtStock: updatedBalance,\n          })\n        }).catch(error => console.log(error))\n       \n\n        \n      let stockRows = [];\n      for (let i = 0; i < numberShares.length; i++) {\n        stockRows.push(\n          <tr key={i}>\n            <td> {stockReport[i][0]} </td>\n            <td> {stockReport[i][1]} </td>\n            <td> ${(stockReport[i][1] * stockReport[i][2]).toFixed(2)} </td>\n            <td>\n              {\" \"}\n              {((stockReport[i][2] / totalPortfolioSum) * 100).toFixed(\n                2\n              )}%{\" \"}\n            </td>\n            <td>\n              <button\n                id={stockReport[i][0]}\n                type=\"button\"\n                onClick={handleDelete}\n                className=\"btn btn-secondary\"\n              >\n                Sell All\n              </button>\n            </td>\n          </tr>\n        );\n      }\n    });\n  }\n\n\n  let stockRows = [];\n  for (let i = 0; i < stockReport.length; i++) {\n    stockRows.push(\n      <tr key={i}>\n        <td> {stockReport[i][0]} </td>\n        <td> {stockReport[i][1]} </td>\n        <td> ${(stockReport[i][1] * stockReport[i][2]).toFixed(2)} </td>\n        <td>\n          {\" \"}\n          {(((stockReport[i][2] / totalPortfolioSum) * 100) * stockReport[i][1]).toFixed(2)}%{\" \"}\n        </td>\n        <td>\n          <button\n            id={stockReport[i][0]}\n            type=\"button\"\n            onClick={handleDelete}\n            className=\"btn btn-secondary\"\n          >\n            Sell All\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <table style={{ color: \"white\" }} className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Symbol</th>\n            <th scope=\"col\">Shares</th>\n            <th scope=\"col\">Total Invested</th>\n            <th scope=\"col\"> % of Your Portfolio</th>\n            <th>Quick Sell</th>\n          </tr>\n        </thead>\n        <tbody>{stockRows}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default ReportPage;\n","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/StockModal.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/StockCard.js",[],"/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/ReviewOrder.js",["58","59"],"import React, { useEffect, useState } from \"react\";\n\nfunction ReviewOrder(props) {\n  const { selected } = props;\n  const { quantity } = props;\n  const { stockId } = props;\n  const { purchasedStocks } = props;\n  const { setPurchasedStocks } = props;\n  const { userId } = props;\n  const { buyingPower } = props;\n  const { setBuyingPower } = props;\n  const { setAccountValue } = props;\n  const { setReviewOrderErrors } = props;\n  const [shares, setShares] = useState(\"\");\n\n  console.log('ReviewOrder.js', 'Shares', shares,'Quantity', quantity)\n\n\n  \n  useEffect(() => {\n    for (let i = 0; i < purchasedStocks.length; i++) {\n      if (stockId === purchasedStocks[i][0]) {\n        setShares(purchasedStocks[i][7]);\n      }\n    }\n\n    if (userId) {\n      fetch(`/api/purchased/${userId}`)\n        .then((res) => res.json())\n        .then((data) => setPurchasedStocks(JSON.parse(data)))\n        .catch((error) => console.log(error));\n    }\n\n    fetch(\"/api/accountvalue\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: parseInt(userId),\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setAccountValue(Number((data)) === 0 ? 20000 : (data))})\n      .catch((error) => console.log(error));\n  }, [\n    shares,\n    buyingPower,\n    stockId,\n    userId, \n    quantity,\n    setPurchasedStocks\n  ]);\n\n  async function handlePlaceOrder() {\n    let boughtStock = buyingPower - props.stockSum;\n    // let sellingStock = Number(buyingPower) + props.stockSum;\n\n    if (selected === \"Buy\") {\n      if (props.stockSum > buyingPower) {\n        setReviewOrderErrors('\"You do not have enough buying power!\"');\n      } else {\n        setReviewOrderErrors(\"\");\n        await fetch(\"/api/buystock\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            symbol: props.symbol,\n            stockName: props.stockName,\n            price: props.stockPrice,\n            day_change: props.dayChange,\n            percentage_change: props.percentageChange,\n            date: props.date,\n            shares: parseInt(quantity),\n            userId: parseInt(userId),\n            initialPrice: props.stockPrice,\n          }),\n        })\n          .then(\n            await fetch(`/api/purchased/${userId}`)\n              .then((res) => res.json())\n              .then((data) => props.setPurchasedStocks(JSON.parse(data)))\n              .catch((error) => console.log(error))\n          )\n          .then(\n            await fetch(\"/api/boughtstock\", {\n              method: \"PUT\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                userId: parseInt(userId),\n                boughtStock: boughtStock,\n              }),\n            })\n          )\n          .then(\n            await fetch(\"/api/userbalance\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                userId: parseInt(userId),\n              }),\n            })\n              .then((res) => res.json())\n              .then((data) => setBuyingPower(JSON.parse(data)))\n              .catch((error) => console.log(error))\n          );\n      }\n    } else if (selected === \"Sell\") {\n      // let soldStock = shares - quantity;\n      if (shares == 0) {\n        setReviewOrderErrors(\"You do not own this stock!\");\n      } else {\n        setReviewOrderErrors(\"\");\n        if (quantity > shares) {\n          setReviewOrderErrors(\"You do not have that many shares to sell!\");\n        } else {\n          setReviewOrderErrors(\"\");\n          if (shares - quantity >= 1) {\n            fetch(\"/api/updatestocks\", {\n              method: \"PUT\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                shares: shares - quantity,\n                stock_id: stockId,\n              }),\n            });\n\n            fetch(\"/api/boughtstock\", {\n              method: \"PUT\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                userId: parseInt(userId),\n                boughtStock: Number(buyingPower) + props.stockSum,\n              }),\n            });\n            fetch(\"/api/userbalance\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                userId: parseInt(userId),\n              }),\n            })\n              .then((res) => res.json())\n              .then((data) => setBuyingPower(JSON.parse(data)))\n              .catch((error) => console.log(error));\n          } else {\n            setReviewOrderErrors(\"\");\n            fetch(\"/api/deleterow\", {\n              method: \"DELETE\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                stock_id: stockId,\n              }),\n            }).then(\n              fetch(`/api/purchased/${userId}`)\n                .then((res) => res.json())\n                .then((data) => props.setPurchasedStocks(JSON.parse(data)))\n                .catch((error) => console.log(error))\n            );\n            fetch(\"/api/boughtstock\", {\n              method: \"PUT\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                userId: parseInt(userId),\n                boughtStock: Number(buyingPower) + props.stockSum,\n              }),\n            }).then(\n              fetch(\"/api/userbalance\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                  userId: parseInt(userId),\n                }),\n              })\n                .then((res) => res.json())\n                .then((data) => setBuyingPower(JSON.parse(data)))\n            );\n          }\n        }\n      }\n    }\n  }\n\n  let boughtStock = buyingPower - props.stockSum;\n  let sellingStock = Number(buyingPower) + Number(props.stockSum);\n\n  return (\n    <div>\n      <div\n        id=\"reviewModal\"\n        className=\"modal fade\"\n        role=\"dialog\"\n        style={{ color: \"black\" }}\n      >\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\"> Review Order </h4>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                &times;\n              </button>\n            </div>\n            <div\n              style={{ display: \"flex\", justifyContent: \"space-around\" }}\n              className=\"modal-body\"\n            >\n              <div style={{ fontSize: \"20px\" }}>\n                <p>\n                  {props.selected} {props.quantity} shares of {props.symbol} (\n                  {props.stockName})\n                </p>\n                <p> Limit at ${props.stockPrice}</p>\n                <p>Estimated Total: ${Number(props.stockSum).toFixed(2)}</p>\n                <p>\n                  {\" \"}\n                  Remaining Buy Power: $\n                  {props.selected === \"Buy\"\n                    ? boughtStock.toFixed(2)\n                    : sellingStock.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              className=\"btn btn-info\"\n              style={{ color: \"black\", fontWeight: \"bolder\" }}\n              onClick={handlePlaceOrder}\n              data-dismiss=\"modal\"\n            >\n              Place Order\n            </button>\n            <div\n              className=\"modal-footer\"\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              <button\n                type=\"button\"\n                className=\"btn btn-default\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewOrder;\n","/Users/johnnyrbrionesjr./newFantasyStockApp/src/components/Loading.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":14},{"ruleId":"64","severity":1,"message":"68","line":28,"column":11,"nodeType":"66","messageId":"67","endLine":28,"endColumn":23},{"ruleId":"64","severity":1,"message":"69","line":29,"column":11,"nodeType":"66","messageId":"67","endLine":29,"endColumn":20},{"ruleId":"64","severity":1,"message":"70","line":31,"column":11,"nodeType":"66","messageId":"67","endLine":31,"endColumn":18},{"ruleId":"64","severity":1,"message":"71","line":32,"column":11,"nodeType":"66","messageId":"67","endLine":32,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":68,"column":6,"nodeType":"74","endLine":68,"endColumn":29,"suggestions":"75"},{"ruleId":"64","severity":1,"message":"76","line":3,"column":10,"nodeType":"66","messageId":"67","endLine":3,"endColumn":20},{"ruleId":"72","severity":1,"message":"77","line":45,"column":6,"nodeType":"74","endLine":52,"endColumn":4,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":109,"column":18,"nodeType":"81","messageId":"82","endLine":109,"endColumn":20},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Fade' is defined but never used.","Identifier","unusedVar","'setIsLoading' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setUser' is assigned a value but never used.","'authentication' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["85"],"'allSymbols' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'purchasedStocks' and 'setAccountValue'. Either include them or remove the dependency array.",["86"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [buyingPower, fetchData, setTesla, userId]",{"range":"91","text":"92"},"Update the dependencies array to be: [shares, buyingPower, stockId, userId, quantity, setPurchasedStocks, purchasedStocks, setAccountValue]",{"range":"93","text":"94"},[2277,2300],"[buyingPower, fetchData, setTesla, userId]",[1296,1393],"[shares, buyingPower, stockId, userId, quantity, setPurchasedStocks, purchasedStocks, setAccountValue]"]